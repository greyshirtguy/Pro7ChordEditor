// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ccli.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Rv.Data {

  /// <summary>Holder for reflection information generated from ccli.proto</summary>
  public static partial class CcliReflection {

    #region Descriptor
    /// <summary>File descriptor for ccli.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CcliReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpjY2xpLnByb3RvEgdydi5kYXRhGhBiYXNpY1R5cGVzLnByb3RvGg50ZW1w",
            "bGF0ZS5wcm90byLoAgoMQ0NMSURvY3VtZW50EjIKEGFwcGxpY2F0aW9uX2lu",
            "Zm8YASABKAsyGC5ydi5kYXRhLkFwcGxpY2F0aW9uSW5mbxIbChNlbmFibGVf",
            "Y2NsaV9kaXNwbGF5GAIgASgIEhQKDGNjbGlfbGljZW5zZRgDIAEoCRI3Cgxk",
            "aXNwbGF5X3R5cGUYBCABKA4yIS5ydi5kYXRhLkNDTElEb2N1bWVudC5EaXNw",
            "bGF5VHlwZRIpCgh0ZW1wbGF0ZRgFIAEoCzIXLnJ2LmRhdGEuVGVtcGxhdGUu",
            "U2xpZGUijAEKC0Rpc3BsYXlUeXBlEhwKGERJU1BMQVlfVFlQRV9GSVJTVF9T",
            "TElERRAAEhsKF0RJU1BMQVlfVFlQRV9MQVNUX1NMSURFEAESJQohRElTUExB",
            "WV9UWVBFX0ZJUlNUX0FORF9MQVNUX1NMSURFEAISGwoXRElTUExBWV9UWVBF",
            "X0FMTF9TTElERVMQA2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Rv.Data.BasicTypesReflection.Descriptor, global::Rv.Data.TemplateReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Rv.Data.CCLIDocument), global::Rv.Data.CCLIDocument.Parser, new[]{ "ApplicationInfo", "EnableCcliDisplay", "CcliLicense", "DisplayType", "Template" }, null, new[]{ typeof(global::Rv.Data.CCLIDocument.Types.DisplayType) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CCLIDocument : pb::IMessage<CCLIDocument>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CCLIDocument> _parser = new pb::MessageParser<CCLIDocument>(() => new CCLIDocument());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CCLIDocument> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rv.Data.CcliReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CCLIDocument() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CCLIDocument(CCLIDocument other) : this() {
      applicationInfo_ = other.applicationInfo_ != null ? other.applicationInfo_.Clone() : null;
      enableCcliDisplay_ = other.enableCcliDisplay_;
      ccliLicense_ = other.ccliLicense_;
      displayType_ = other.displayType_;
      template_ = other.template_ != null ? other.template_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CCLIDocument Clone() {
      return new CCLIDocument(this);
    }

    /// <summary>Field number for the "application_info" field.</summary>
    public const int ApplicationInfoFieldNumber = 1;
    private global::Rv.Data.ApplicationInfo applicationInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Rv.Data.ApplicationInfo ApplicationInfo {
      get { return applicationInfo_; }
      set {
        applicationInfo_ = value;
      }
    }

    /// <summary>Field number for the "enable_ccli_display" field.</summary>
    public const int EnableCcliDisplayFieldNumber = 2;
    private bool enableCcliDisplay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool EnableCcliDisplay {
      get { return enableCcliDisplay_; }
      set {
        enableCcliDisplay_ = value;
      }
    }

    /// <summary>Field number for the "ccli_license" field.</summary>
    public const int CcliLicenseFieldNumber = 3;
    private string ccliLicense_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CcliLicense {
      get { return ccliLicense_; }
      set {
        ccliLicense_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "display_type" field.</summary>
    public const int DisplayTypeFieldNumber = 4;
    private global::Rv.Data.CCLIDocument.Types.DisplayType displayType_ = global::Rv.Data.CCLIDocument.Types.DisplayType.FirstSlide;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Rv.Data.CCLIDocument.Types.DisplayType DisplayType {
      get { return displayType_; }
      set {
        displayType_ = value;
      }
    }

    /// <summary>Field number for the "template" field.</summary>
    public const int TemplateFieldNumber = 5;
    private global::Rv.Data.Template.Types.Slide template_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Rv.Data.Template.Types.Slide Template {
      get { return template_; }
      set {
        template_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CCLIDocument);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CCLIDocument other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ApplicationInfo, other.ApplicationInfo)) return false;
      if (EnableCcliDisplay != other.EnableCcliDisplay) return false;
      if (CcliLicense != other.CcliLicense) return false;
      if (DisplayType != other.DisplayType) return false;
      if (!object.Equals(Template, other.Template)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (applicationInfo_ != null) hash ^= ApplicationInfo.GetHashCode();
      if (EnableCcliDisplay != false) hash ^= EnableCcliDisplay.GetHashCode();
      if (CcliLicense.Length != 0) hash ^= CcliLicense.GetHashCode();
      if (DisplayType != global::Rv.Data.CCLIDocument.Types.DisplayType.FirstSlide) hash ^= DisplayType.GetHashCode();
      if (template_ != null) hash ^= Template.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (applicationInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ApplicationInfo);
      }
      if (EnableCcliDisplay != false) {
        output.WriteRawTag(16);
        output.WriteBool(EnableCcliDisplay);
      }
      if (CcliLicense.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CcliLicense);
      }
      if (DisplayType != global::Rv.Data.CCLIDocument.Types.DisplayType.FirstSlide) {
        output.WriteRawTag(32);
        output.WriteEnum((int) DisplayType);
      }
      if (template_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Template);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (applicationInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ApplicationInfo);
      }
      if (EnableCcliDisplay != false) {
        output.WriteRawTag(16);
        output.WriteBool(EnableCcliDisplay);
      }
      if (CcliLicense.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CcliLicense);
      }
      if (DisplayType != global::Rv.Data.CCLIDocument.Types.DisplayType.FirstSlide) {
        output.WriteRawTag(32);
        output.WriteEnum((int) DisplayType);
      }
      if (template_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Template);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (applicationInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApplicationInfo);
      }
      if (EnableCcliDisplay != false) {
        size += 1 + 1;
      }
      if (CcliLicense.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CcliLicense);
      }
      if (DisplayType != global::Rv.Data.CCLIDocument.Types.DisplayType.FirstSlide) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DisplayType);
      }
      if (template_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Template);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CCLIDocument other) {
      if (other == null) {
        return;
      }
      if (other.applicationInfo_ != null) {
        if (applicationInfo_ == null) {
          ApplicationInfo = new global::Rv.Data.ApplicationInfo();
        }
        ApplicationInfo.MergeFrom(other.ApplicationInfo);
      }
      if (other.EnableCcliDisplay != false) {
        EnableCcliDisplay = other.EnableCcliDisplay;
      }
      if (other.CcliLicense.Length != 0) {
        CcliLicense = other.CcliLicense;
      }
      if (other.DisplayType != global::Rv.Data.CCLIDocument.Types.DisplayType.FirstSlide) {
        DisplayType = other.DisplayType;
      }
      if (other.template_ != null) {
        if (template_ == null) {
          Template = new global::Rv.Data.Template.Types.Slide();
        }
        Template.MergeFrom(other.Template);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (applicationInfo_ == null) {
              ApplicationInfo = new global::Rv.Data.ApplicationInfo();
            }
            input.ReadMessage(ApplicationInfo);
            break;
          }
          case 16: {
            EnableCcliDisplay = input.ReadBool();
            break;
          }
          case 26: {
            CcliLicense = input.ReadString();
            break;
          }
          case 32: {
            DisplayType = (global::Rv.Data.CCLIDocument.Types.DisplayType) input.ReadEnum();
            break;
          }
          case 42: {
            if (template_ == null) {
              Template = new global::Rv.Data.Template.Types.Slide();
            }
            input.ReadMessage(Template);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (applicationInfo_ == null) {
              ApplicationInfo = new global::Rv.Data.ApplicationInfo();
            }
            input.ReadMessage(ApplicationInfo);
            break;
          }
          case 16: {
            EnableCcliDisplay = input.ReadBool();
            break;
          }
          case 26: {
            CcliLicense = input.ReadString();
            break;
          }
          case 32: {
            DisplayType = (global::Rv.Data.CCLIDocument.Types.DisplayType) input.ReadEnum();
            break;
          }
          case 42: {
            if (template_ == null) {
              Template = new global::Rv.Data.Template.Types.Slide();
            }
            input.ReadMessage(Template);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CCLIDocument message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum DisplayType {
        [pbr::OriginalName("DISPLAY_TYPE_FIRST_SLIDE")] FirstSlide = 0,
        [pbr::OriginalName("DISPLAY_TYPE_LAST_SLIDE")] LastSlide = 1,
        [pbr::OriginalName("DISPLAY_TYPE_FIRST_AND_LAST_SLIDE")] FirstAndLastSlide = 2,
        [pbr::OriginalName("DISPLAY_TYPE_ALL_SLIDES")] AllSlides = 3,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
