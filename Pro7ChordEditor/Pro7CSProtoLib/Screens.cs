// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: screens.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Rv.Data {

  /// <summary>Holder for reflection information generated from screens.proto</summary>
  public static partial class ScreensReflection {

    #region Descriptor
    /// <summary>File descriptor for screens.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ScreensReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1zY3JlZW5zLnByb3RvEgdydi5kYXRhGhBiYXNpY1R5cGVzLnByb3RvGhJn",
            "cmFwaGljc0RhdGEucHJvdG8ilwYKBlNjcmVlbhIbCgR1dWlkGAEgASgLMg0u",
            "cnYuZGF0YS5VVUlEEgwKBG5hbWUYAiABKAkSHQoFY29sb3IYAyABKAsyDi5y",
            "di5kYXRhLkNvbG9yEiYKBmJvdW5kcxgEIAEoCzIWLnJ2LmRhdGEuR3JhcGhp",
            "Y3MuUmVjdBIbChNhc3BlY3RfcmF0aW9fbG9ja2VkGAUgASgIEikKIW91dHB1",
            "dF9ib3VuZHNfYXNwZWN0X3JhdGlvX2xvY2tlZBgGIAEoCBIeChZjb3JuZXJf",
            "cGlubmluZ19lbmFibGVkGAcgASgIEjMKE3N1YnNjcmVlbl91bml0X3JlY3QY",
            "CCABKAsyFi5ydi5kYXRhLkdyYXBoaWNzLlJlY3QSEAoIcm90YXRpb24YCSAB",
            "KAESDQoFZ2FtbWEYCiABKAESEwoLYmxhY2tfbGV2ZWwYCyABKAESFQoNYmxl",
            "bmRlZF9lZGdlcxgMIAEoDRIsCg1jb3JuZXJfdmFsdWVzGA0gASgLMhUucnYu",
            "ZGF0YS5Db3JuZXJWYWx1ZXMSLgoOb3V0cHV0X2Rpc3BsYXkYDiABKAsyFi5y",
            "di5kYXRhLk91dHB1dERpc3BsYXkSFQoNY29sb3JfZW5hYmxlZBgPIAEoCBI5",
            "ChBjb2xvcl9hZGp1c3RtZW50GBAgASgLMh8ucnYuZGF0YS5TY3JlZW4uQ29s",
            "b3JBZGp1c3RtZW50Ej0KEmJsZW5kX2NvbXBlbnNhdGlvbhgRIAEoCzIhLnJ2",
            "LmRhdGEuU2NyZWVuLkJsZW5kQ29tcGVuc2F0aW9uGpcBCg9Db2xvckFkanVz",
            "dG1lbnQSDQoFZ2FtbWEYASABKAESEwoLYmxhY2tfbGV2ZWwYAiABKAESEQoJ",
            "cmVkX2xldmVsGAMgASgBEhMKC2dyZWVuX2xldmVsGAQgASgBEhIKCmJsdWVf",
            "bGV2ZWwYBSABKAESEgoKYnJpZ2h0bmVzcxgGIAEoARIQCghjb250cmFzdBgH",
            "IAEoARooChFCbGVuZENvbXBlbnNhdGlvbhITCgtibGFja19sZXZlbBgBIAEo",
            "ASLCAQoMQ29ybmVyVmFsdWVzEikKCHRvcF9sZWZ0GAEgASgLMhcucnYuZGF0",
            "YS5HcmFwaGljcy5Qb2ludBIqCgl0b3BfcmlnaHQYAiABKAsyFy5ydi5kYXRh",
            "LkdyYXBoaWNzLlBvaW50EiwKC2JvdHRvbV9sZWZ0GAMgASgLMhcucnYuZGF0",
            "YS5HcmFwaGljcy5Qb2ludBItCgxib3R0b21fcmlnaHQYBCABKAsyFy5ydi5k",
            "YXRhLkdyYXBoaWNzLlBvaW50ImQKC0Rpc3BsYXlNb2RlEgwKBG5hbWUYASAB",
            "KAkSDQoFd2lkdGgYAiABKA0SDgoGaGVpZ2h0GAMgASgNEhQKDHJlZnJlc2hf",
            "cmF0ZRgEIAEoARISCgppbnRlcmxhY2VkGAUgASgIIqMFCg1PdXRwdXREaXNw",
            "bGF5EgwKBG5hbWUYASABKAkSDQoFbW9kZWwYAiABKAkSDgoGc2VyaWFsGAMg",
            "ASgJEhIKCmRldmljZU5hbWUYBCABKAkSDgoGdmVuZG9yGAUgASgJEhEKCW1v",
            "ZGVJbmRleBgGIAEoDRImCgZib3VuZHMYByABKAsyFi5ydi5kYXRhLkdyYXBo",
            "aWNzLlJlY3QSKQoEdHlwZRgIIAEoDjIbLnJ2LmRhdGEuT3V0cHV0RGlzcGxh",
            "eS5UeXBlEiIKBG1vZGUYCSABKAsyFC5ydi5kYXRhLkRpc3BsYXlNb2RlEhEK",
            "CXJlbmRlcl9pZBgKIAEoCRJbCh5ibGFja19tYWdpY19hbHBoYV9rZXlfc2V0",
            "dGluZ3MYCyABKAsyMS5ydi5kYXRhLk91dHB1dERpc3BsYXkuQmxhY2ttYWdp",
            "Y0FscGhhS2V5U2V0dGluZ3NIABrIAQoaQmxhY2ttYWdpY0FscGhhS2V5U2V0",
            "dGluZ3MSDwoHZW5hYmxlZBgBIAEoCBJLCghrZXlfbW9kZRgCIAEoDjI5LnJ2",
            "LmRhdGEuT3V0cHV0RGlzcGxheS5CbGFja21hZ2ljQWxwaGFLZXlTZXR0aW5n",
            "cy5LZXlNb2RlEhMKC2JsZW5kX3ZhbHVlGAMgASgBIjcKB0tleU1vZGUSFQoR",
            "S0VZX01PREVfSU5URVJOQUwQABIVChFLRVlfTU9ERV9FWFRFUk5BTBABImgK",
            "BFR5cGUSEAoMVFlQRV9VTktOT1dOEAASDwoLVFlQRV9TQ1JFRU4QARINCglU",
            "WVBFX0NBUkQQAhIMCghUWVBFX05ESRADEg8KC1RZUEVfU1lQSE9OEAQSDwoL",
            "VFlQRV9DVVNUT00QBUISChBBbHBoYUtleVNldHRpbmdzIrQGCglFZGdlQmxl",
            "bmQSGwoEdXVpZBgBIAEoCzINLnJ2LmRhdGEuVVVJRBIOCgZyYWRpdXMYAiAB",
            "KAESEQoJaW50ZW5zaXR5GAMgASgBEiUKBG1vZGUYBCABKA4yFy5ydi5kYXRh",
            "LkVkZ2VCbGVuZC5Nb2RlEi8KDGZpcnN0X3NjcmVlbhgFIAEoCzIZLnJ2LmRh",
            "dGEuRWRnZUJsZW5kLlNjcmVlbhIwCg1zZWNvbmRfc2NyZWVuGAYgASgLMhku",
            "cnYuZGF0YS5FZGdlQmxlbmQuU2NyZWVuEi4KC2xlZnRfc2NyZWVuGAcgASgL",
            "MhkucnYuZGF0YS5FZGdlQmxlbmQuU2NyZWVuEi8KDHJpZ2h0X3NjcmVlbhgI",
            "IAEoCzIZLnJ2LmRhdGEuRWRnZUJsZW5kLlNjcmVlbhItCgp0b3Bfc2NyZWVu",
            "GAkgASgLMhkucnYuZGF0YS5FZGdlQmxlbmQuU2NyZWVuEjAKDWJvdHRvbV9z",
            "Y3JlZW4YCiABKAsyGS5ydi5kYXRhLkVkZ2VCbGVuZC5TY3JlZW4a3QIKBlNj",
            "cmVlbhIbCgR1dWlkGAEgASgLMg0ucnYuZGF0YS5VVUlEEiwKBGVkZ2UYAiAB",
            "KA4yHi5ydi5kYXRhLkVkZ2VCbGVuZC5TY3JlZW4uRWRnZRINCgVnYW1tYRgD",
            "IAEoARITCgtibGFja19sZXZlbBgEIAEoARIsCgRtb2RlGAUgASgOMh4ucnYu",
            "ZGF0YS5FZGdlQmxlbmQuU2NyZWVuLk1vZGUSDgoGcmFkaXVzGAYgASgBEhEK",
            "CWludGVuc2l0eRgHIAEoASJWCgRFZGdlEhAKDEVER0VfVU5LTk9XThAAEg0K",
            "CUVER0VfTEVGVBABEg4KCkVER0VfUklHSFQQAhIMCghFREdFX1RPUBADEg8K",
            "C0VER0VfQk9UVE9NEAQiOwoETW9kZRIPCgtNT0RFX0xJTkVBUhAAEg4KCk1P",
            "REVfQ1VCSUMQARISCg5NT0RFX1FVQURSQVRJQxACIjsKBE1vZGUSDwoLTU9E",
            "RV9MSU5FQVIQABIOCgpNT0RFX0NVQklDEAESEgoOTU9ERV9RVUFEUkFUSUMQ",
            "AmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Rv.Data.BasicTypesReflection.Descriptor, global::Rv.Data.GraphicsDataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Rv.Data.Screen), global::Rv.Data.Screen.Parser, new[]{ "Uuid", "Name", "Color", "Bounds", "AspectRatioLocked", "OutputBoundsAspectRatioLocked", "CornerPinningEnabled", "SubscreenUnitRect", "Rotation", "Gamma", "BlackLevel", "BlendedEdges", "CornerValues", "OutputDisplay", "ColorEnabled", "ColorAdjustment", "BlendCompensation" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Rv.Data.Screen.Types.ColorAdjustment), global::Rv.Data.Screen.Types.ColorAdjustment.Parser, new[]{ "Gamma", "BlackLevel", "RedLevel", "GreenLevel", "BlueLevel", "Brightness", "Contrast" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rv.Data.Screen.Types.BlendCompensation), global::Rv.Data.Screen.Types.BlendCompensation.Parser, new[]{ "BlackLevel" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rv.Data.CornerValues), global::Rv.Data.CornerValues.Parser, new[]{ "TopLeft", "TopRight", "BottomLeft", "BottomRight" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rv.Data.DisplayMode), global::Rv.Data.DisplayMode.Parser, new[]{ "Name", "Width", "Height", "RefreshRate", "Interlaced" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rv.Data.OutputDisplay), global::Rv.Data.OutputDisplay.Parser, new[]{ "Name", "Model", "Serial", "DeviceName", "Vendor", "ModeIndex", "Bounds", "Type", "Mode", "RenderId", "BlackMagicAlphaKeySettings" }, new[]{ "AlphaKeySettings" }, new[]{ typeof(global::Rv.Data.OutputDisplay.Types.Type) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Rv.Data.OutputDisplay.Types.BlackmagicAlphaKeySettings), global::Rv.Data.OutputDisplay.Types.BlackmagicAlphaKeySettings.Parser, new[]{ "Enabled", "KeyMode", "BlendValue" }, null, new[]{ typeof(global::Rv.Data.OutputDisplay.Types.BlackmagicAlphaKeySettings.Types.KeyMode) }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rv.Data.EdgeBlend), global::Rv.Data.EdgeBlend.Parser, new[]{ "Uuid", "Radius", "Intensity", "Mode", "FirstScreen", "SecondScreen", "LeftScreen", "RightScreen", "TopScreen", "BottomScreen" }, null, new[]{ typeof(global::Rv.Data.EdgeBlend.Types.Mode) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Rv.Data.EdgeBlend.Types.Screen), global::Rv.Data.EdgeBlend.Types.Screen.Parser, new[]{ "Uuid", "Edge", "Gamma", "BlackLevel", "Mode", "Radius", "Intensity" }, null, new[]{ typeof(global::Rv.Data.EdgeBlend.Types.Screen.Types.Edge), typeof(global::Rv.Data.EdgeBlend.Types.Screen.Types.Mode) }, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Screen : pb::IMessage<Screen>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Screen> _parser = new pb::MessageParser<Screen>(() => new Screen());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Screen> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rv.Data.ScreensReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Screen() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Screen(Screen other) : this() {
      uuid_ = other.uuid_ != null ? other.uuid_.Clone() : null;
      name_ = other.name_;
      color_ = other.color_ != null ? other.color_.Clone() : null;
      bounds_ = other.bounds_ != null ? other.bounds_.Clone() : null;
      aspectRatioLocked_ = other.aspectRatioLocked_;
      outputBoundsAspectRatioLocked_ = other.outputBoundsAspectRatioLocked_;
      cornerPinningEnabled_ = other.cornerPinningEnabled_;
      subscreenUnitRect_ = other.subscreenUnitRect_ != null ? other.subscreenUnitRect_.Clone() : null;
      rotation_ = other.rotation_;
      gamma_ = other.gamma_;
      blackLevel_ = other.blackLevel_;
      blendedEdges_ = other.blendedEdges_;
      cornerValues_ = other.cornerValues_ != null ? other.cornerValues_.Clone() : null;
      outputDisplay_ = other.outputDisplay_ != null ? other.outputDisplay_.Clone() : null;
      colorEnabled_ = other.colorEnabled_;
      colorAdjustment_ = other.colorAdjustment_ != null ? other.colorAdjustment_.Clone() : null;
      blendCompensation_ = other.blendCompensation_ != null ? other.blendCompensation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Screen Clone() {
      return new Screen(this);
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private global::Rv.Data.UUID uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Rv.Data.UUID Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 3;
    private global::Rv.Data.Color color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Rv.Data.Color Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "bounds" field.</summary>
    public const int BoundsFieldNumber = 4;
    private global::Rv.Data.Graphics.Types.Rect bounds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Rv.Data.Graphics.Types.Rect Bounds {
      get { return bounds_; }
      set {
        bounds_ = value;
      }
    }

    /// <summary>Field number for the "aspect_ratio_locked" field.</summary>
    public const int AspectRatioLockedFieldNumber = 5;
    private bool aspectRatioLocked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AspectRatioLocked {
      get { return aspectRatioLocked_; }
      set {
        aspectRatioLocked_ = value;
      }
    }

    /// <summary>Field number for the "output_bounds_aspect_ratio_locked" field.</summary>
    public const int OutputBoundsAspectRatioLockedFieldNumber = 6;
    private bool outputBoundsAspectRatioLocked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OutputBoundsAspectRatioLocked {
      get { return outputBoundsAspectRatioLocked_; }
      set {
        outputBoundsAspectRatioLocked_ = value;
      }
    }

    /// <summary>Field number for the "corner_pinning_enabled" field.</summary>
    public const int CornerPinningEnabledFieldNumber = 7;
    private bool cornerPinningEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CornerPinningEnabled {
      get { return cornerPinningEnabled_; }
      set {
        cornerPinningEnabled_ = value;
      }
    }

    /// <summary>Field number for the "subscreen_unit_rect" field.</summary>
    public const int SubscreenUnitRectFieldNumber = 8;
    private global::Rv.Data.Graphics.Types.Rect subscreenUnitRect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Rv.Data.Graphics.Types.Rect SubscreenUnitRect {
      get { return subscreenUnitRect_; }
      set {
        subscreenUnitRect_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 9;
    private double rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "gamma" field.</summary>
    public const int GammaFieldNumber = 10;
    private double gamma_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Gamma {
      get { return gamma_; }
      set {
        gamma_ = value;
      }
    }

    /// <summary>Field number for the "black_level" field.</summary>
    public const int BlackLevelFieldNumber = 11;
    private double blackLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double BlackLevel {
      get { return blackLevel_; }
      set {
        blackLevel_ = value;
      }
    }

    /// <summary>Field number for the "blended_edges" field.</summary>
    public const int BlendedEdgesFieldNumber = 12;
    private uint blendedEdges_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint BlendedEdges {
      get { return blendedEdges_; }
      set {
        blendedEdges_ = value;
      }
    }

    /// <summary>Field number for the "corner_values" field.</summary>
    public const int CornerValuesFieldNumber = 13;
    private global::Rv.Data.CornerValues cornerValues_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Rv.Data.CornerValues CornerValues {
      get { return cornerValues_; }
      set {
        cornerValues_ = value;
      }
    }

    /// <summary>Field number for the "output_display" field.</summary>
    public const int OutputDisplayFieldNumber = 14;
    private global::Rv.Data.OutputDisplay outputDisplay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Rv.Data.OutputDisplay OutputDisplay {
      get { return outputDisplay_; }
      set {
        outputDisplay_ = value;
      }
    }

    /// <summary>Field number for the "color_enabled" field.</summary>
    public const int ColorEnabledFieldNumber = 15;
    private bool colorEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ColorEnabled {
      get { return colorEnabled_; }
      set {
        colorEnabled_ = value;
      }
    }

    /// <summary>Field number for the "color_adjustment" field.</summary>
    public const int ColorAdjustmentFieldNumber = 16;
    private global::Rv.Data.Screen.Types.ColorAdjustment colorAdjustment_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Rv.Data.Screen.Types.ColorAdjustment ColorAdjustment {
      get { return colorAdjustment_; }
      set {
        colorAdjustment_ = value;
      }
    }

    /// <summary>Field number for the "blend_compensation" field.</summary>
    public const int BlendCompensationFieldNumber = 17;
    private global::Rv.Data.Screen.Types.BlendCompensation blendCompensation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Rv.Data.Screen.Types.BlendCompensation BlendCompensation {
      get { return blendCompensation_; }
      set {
        blendCompensation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Screen);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Screen other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Uuid, other.Uuid)) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(Color, other.Color)) return false;
      if (!object.Equals(Bounds, other.Bounds)) return false;
      if (AspectRatioLocked != other.AspectRatioLocked) return false;
      if (OutputBoundsAspectRatioLocked != other.OutputBoundsAspectRatioLocked) return false;
      if (CornerPinningEnabled != other.CornerPinningEnabled) return false;
      if (!object.Equals(SubscreenUnitRect, other.SubscreenUnitRect)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Rotation, other.Rotation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Gamma, other.Gamma)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BlackLevel, other.BlackLevel)) return false;
      if (BlendedEdges != other.BlendedEdges) return false;
      if (!object.Equals(CornerValues, other.CornerValues)) return false;
      if (!object.Equals(OutputDisplay, other.OutputDisplay)) return false;
      if (ColorEnabled != other.ColorEnabled) return false;
      if (!object.Equals(ColorAdjustment, other.ColorAdjustment)) return false;
      if (!object.Equals(BlendCompensation, other.BlendCompensation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (uuid_ != null) hash ^= Uuid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (color_ != null) hash ^= Color.GetHashCode();
      if (bounds_ != null) hash ^= Bounds.GetHashCode();
      if (AspectRatioLocked != false) hash ^= AspectRatioLocked.GetHashCode();
      if (OutputBoundsAspectRatioLocked != false) hash ^= OutputBoundsAspectRatioLocked.GetHashCode();
      if (CornerPinningEnabled != false) hash ^= CornerPinningEnabled.GetHashCode();
      if (subscreenUnitRect_ != null) hash ^= SubscreenUnitRect.GetHashCode();
      if (Rotation != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Rotation);
      if (Gamma != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Gamma);
      if (BlackLevel != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BlackLevel);
      if (BlendedEdges != 0) hash ^= BlendedEdges.GetHashCode();
      if (cornerValues_ != null) hash ^= CornerValues.GetHashCode();
      if (outputDisplay_ != null) hash ^= OutputDisplay.GetHashCode();
      if (ColorEnabled != false) hash ^= ColorEnabled.GetHashCode();
      if (colorAdjustment_ != null) hash ^= ColorAdjustment.GetHashCode();
      if (blendCompensation_ != null) hash ^= BlendCompensation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (uuid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Uuid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (color_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Color);
      }
      if (bounds_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Bounds);
      }
      if (AspectRatioLocked != false) {
        output.WriteRawTag(40);
        output.WriteBool(AspectRatioLocked);
      }
      if (OutputBoundsAspectRatioLocked != false) {
        output.WriteRawTag(48);
        output.WriteBool(OutputBoundsAspectRatioLocked);
      }
      if (CornerPinningEnabled != false) {
        output.WriteRawTag(56);
        output.WriteBool(CornerPinningEnabled);
      }
      if (subscreenUnitRect_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(SubscreenUnitRect);
      }
      if (Rotation != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Rotation);
      }
      if (Gamma != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(Gamma);
      }
      if (BlackLevel != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(BlackLevel);
      }
      if (BlendedEdges != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(BlendedEdges);
      }
      if (cornerValues_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(CornerValues);
      }
      if (outputDisplay_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(OutputDisplay);
      }
      if (ColorEnabled != false) {
        output.WriteRawTag(120);
        output.WriteBool(ColorEnabled);
      }
      if (colorAdjustment_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(ColorAdjustment);
      }
      if (blendCompensation_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(BlendCompensation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (uuid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Uuid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (color_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Color);
      }
      if (bounds_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Bounds);
      }
      if (AspectRatioLocked != false) {
        output.WriteRawTag(40);
        output.WriteBool(AspectRatioLocked);
      }
      if (OutputBoundsAspectRatioLocked != false) {
        output.WriteRawTag(48);
        output.WriteBool(OutputBoundsAspectRatioLocked);
      }
      if (CornerPinningEnabled != false) {
        output.WriteRawTag(56);
        output.WriteBool(CornerPinningEnabled);
      }
      if (subscreenUnitRect_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(SubscreenUnitRect);
      }
      if (Rotation != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Rotation);
      }
      if (Gamma != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(Gamma);
      }
      if (BlackLevel != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(BlackLevel);
      }
      if (BlendedEdges != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(BlendedEdges);
      }
      if (cornerValues_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(CornerValues);
      }
      if (outputDisplay_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(OutputDisplay);
      }
      if (ColorEnabled != false) {
        output.WriteRawTag(120);
        output.WriteBool(ColorEnabled);
      }
      if (colorAdjustment_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(ColorAdjustment);
      }
      if (blendCompensation_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(BlendCompensation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (uuid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Uuid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (bounds_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bounds);
      }
      if (AspectRatioLocked != false) {
        size += 1 + 1;
      }
      if (OutputBoundsAspectRatioLocked != false) {
        size += 1 + 1;
      }
      if (CornerPinningEnabled != false) {
        size += 1 + 1;
      }
      if (subscreenUnitRect_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SubscreenUnitRect);
      }
      if (Rotation != 0D) {
        size += 1 + 8;
      }
      if (Gamma != 0D) {
        size += 1 + 8;
      }
      if (BlackLevel != 0D) {
        size += 1 + 8;
      }
      if (BlendedEdges != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BlendedEdges);
      }
      if (cornerValues_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CornerValues);
      }
      if (outputDisplay_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OutputDisplay);
      }
      if (ColorEnabled != false) {
        size += 1 + 1;
      }
      if (colorAdjustment_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ColorAdjustment);
      }
      if (blendCompensation_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BlendCompensation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Screen other) {
      if (other == null) {
        return;
      }
      if (other.uuid_ != null) {
        if (uuid_ == null) {
          Uuid = new global::Rv.Data.UUID();
        }
        Uuid.MergeFrom(other.Uuid);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.color_ != null) {
        if (color_ == null) {
          Color = new global::Rv.Data.Color();
        }
        Color.MergeFrom(other.Color);
      }
      if (other.bounds_ != null) {
        if (bounds_ == null) {
          Bounds = new global::Rv.Data.Graphics.Types.Rect();
        }
        Bounds.MergeFrom(other.Bounds);
      }
      if (other.AspectRatioLocked != false) {
        AspectRatioLocked = other.AspectRatioLocked;
      }
      if (other.OutputBoundsAspectRatioLocked != false) {
        OutputBoundsAspectRatioLocked = other.OutputBoundsAspectRatioLocked;
      }
      if (other.CornerPinningEnabled != false) {
        CornerPinningEnabled = other.CornerPinningEnabled;
      }
      if (other.subscreenUnitRect_ != null) {
        if (subscreenUnitRect_ == null) {
          SubscreenUnitRect = new global::Rv.Data.Graphics.Types.Rect();
        }
        SubscreenUnitRect.MergeFrom(other.SubscreenUnitRect);
      }
      if (other.Rotation != 0D) {
        Rotation = other.Rotation;
      }
      if (other.Gamma != 0D) {
        Gamma = other.Gamma;
      }
      if (other.BlackLevel != 0D) {
        BlackLevel = other.BlackLevel;
      }
      if (other.BlendedEdges != 0) {
        BlendedEdges = other.BlendedEdges;
      }
      if (other.cornerValues_ != null) {
        if (cornerValues_ == null) {
          CornerValues = new global::Rv.Data.CornerValues();
        }
        CornerValues.MergeFrom(other.CornerValues);
      }
      if (other.outputDisplay_ != null) {
        if (outputDisplay_ == null) {
          OutputDisplay = new global::Rv.Data.OutputDisplay();
        }
        OutputDisplay.MergeFrom(other.OutputDisplay);
      }
      if (other.ColorEnabled != false) {
        ColorEnabled = other.ColorEnabled;
      }
      if (other.colorAdjustment_ != null) {
        if (colorAdjustment_ == null) {
          ColorAdjustment = new global::Rv.Data.Screen.Types.ColorAdjustment();
        }
        ColorAdjustment.MergeFrom(other.ColorAdjustment);
      }
      if (other.blendCompensation_ != null) {
        if (blendCompensation_ == null) {
          BlendCompensation = new global::Rv.Data.Screen.Types.BlendCompensation();
        }
        BlendCompensation.MergeFrom(other.BlendCompensation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (uuid_ == null) {
              Uuid = new global::Rv.Data.UUID();
            }
            input.ReadMessage(Uuid);
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            if (color_ == null) {
              Color = new global::Rv.Data.Color();
            }
            input.ReadMessage(Color);
            break;
          }
          case 34: {
            if (bounds_ == null) {
              Bounds = new global::Rv.Data.Graphics.Types.Rect();
            }
            input.ReadMessage(Bounds);
            break;
          }
          case 40: {
            AspectRatioLocked = input.ReadBool();
            break;
          }
          case 48: {
            OutputBoundsAspectRatioLocked = input.ReadBool();
            break;
          }
          case 56: {
            CornerPinningEnabled = input.ReadBool();
            break;
          }
          case 66: {
            if (subscreenUnitRect_ == null) {
              SubscreenUnitRect = new global::Rv.Data.Graphics.Types.Rect();
            }
            input.ReadMessage(SubscreenUnitRect);
            break;
          }
          case 73: {
            Rotation = input.ReadDouble();
            break;
          }
          case 81: {
            Gamma = input.ReadDouble();
            break;
          }
          case 89: {
            BlackLevel = input.ReadDouble();
            break;
          }
          case 96: {
            BlendedEdges = input.ReadUInt32();
            break;
          }
          case 106: {
            if (cornerValues_ == null) {
              CornerValues = new global::Rv.Data.CornerValues();
            }
            input.ReadMessage(CornerValues);
            break;
          }
          case 114: {
            if (outputDisplay_ == null) {
              OutputDisplay = new global::Rv.Data.OutputDisplay();
            }
            input.ReadMessage(OutputDisplay);
            break;
          }
          case 120: {
            ColorEnabled = input.ReadBool();
            break;
          }
          case 130: {
            if (colorAdjustment_ == null) {
              ColorAdjustment = new global::Rv.Data.Screen.Types.ColorAdjustment();
            }
            input.ReadMessage(ColorAdjustment);
            break;
          }
          case 138: {
            if (blendCompensation_ == null) {
              BlendCompensation = new global::Rv.Data.Screen.Types.BlendCompensation();
            }
            input.ReadMessage(BlendCompensation);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (uuid_ == null) {
              Uuid = new global::Rv.Data.UUID();
            }
            input.ReadMessage(Uuid);
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            if (color_ == null) {
              Color = new global::Rv.Data.Color();
            }
            input.ReadMessage(Color);
            break;
          }
          case 34: {
            if (bounds_ == null) {
              Bounds = new global::Rv.Data.Graphics.Types.Rect();
            }
            input.ReadMessage(Bounds);
            break;
          }
          case 40: {
            AspectRatioLocked = input.ReadBool();
            break;
          }
          case 48: {
            OutputBoundsAspectRatioLocked = input.ReadBool();
            break;
          }
          case 56: {
            CornerPinningEnabled = input.ReadBool();
            break;
          }
          case 66: {
            if (subscreenUnitRect_ == null) {
              SubscreenUnitRect = new global::Rv.Data.Graphics.Types.Rect();
            }
            input.ReadMessage(SubscreenUnitRect);
            break;
          }
          case 73: {
            Rotation = input.ReadDouble();
            break;
          }
          case 81: {
            Gamma = input.ReadDouble();
            break;
          }
          case 89: {
            BlackLevel = input.ReadDouble();
            break;
          }
          case 96: {
            BlendedEdges = input.ReadUInt32();
            break;
          }
          case 106: {
            if (cornerValues_ == null) {
              CornerValues = new global::Rv.Data.CornerValues();
            }
            input.ReadMessage(CornerValues);
            break;
          }
          case 114: {
            if (outputDisplay_ == null) {
              OutputDisplay = new global::Rv.Data.OutputDisplay();
            }
            input.ReadMessage(OutputDisplay);
            break;
          }
          case 120: {
            ColorEnabled = input.ReadBool();
            break;
          }
          case 130: {
            if (colorAdjustment_ == null) {
              ColorAdjustment = new global::Rv.Data.Screen.Types.ColorAdjustment();
            }
            input.ReadMessage(ColorAdjustment);
            break;
          }
          case 138: {
            if (blendCompensation_ == null) {
              BlendCompensation = new global::Rv.Data.Screen.Types.BlendCompensation();
            }
            input.ReadMessage(BlendCompensation);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Screen message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class ColorAdjustment : pb::IMessage<ColorAdjustment>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ColorAdjustment> _parser = new pb::MessageParser<ColorAdjustment>(() => new ColorAdjustment());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<ColorAdjustment> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Rv.Data.Screen.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ColorAdjustment() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ColorAdjustment(ColorAdjustment other) : this() {
          gamma_ = other.gamma_;
          blackLevel_ = other.blackLevel_;
          redLevel_ = other.redLevel_;
          greenLevel_ = other.greenLevel_;
          blueLevel_ = other.blueLevel_;
          brightness_ = other.brightness_;
          contrast_ = other.contrast_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ColorAdjustment Clone() {
          return new ColorAdjustment(this);
        }

        /// <summary>Field number for the "gamma" field.</summary>
        public const int GammaFieldNumber = 1;
        private double gamma_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double Gamma {
          get { return gamma_; }
          set {
            gamma_ = value;
          }
        }

        /// <summary>Field number for the "black_level" field.</summary>
        public const int BlackLevelFieldNumber = 2;
        private double blackLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double BlackLevel {
          get { return blackLevel_; }
          set {
            blackLevel_ = value;
          }
        }

        /// <summary>Field number for the "red_level" field.</summary>
        public const int RedLevelFieldNumber = 3;
        private double redLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double RedLevel {
          get { return redLevel_; }
          set {
            redLevel_ = value;
          }
        }

        /// <summary>Field number for the "green_level" field.</summary>
        public const int GreenLevelFieldNumber = 4;
        private double greenLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double GreenLevel {
          get { return greenLevel_; }
          set {
            greenLevel_ = value;
          }
        }

        /// <summary>Field number for the "blue_level" field.</summary>
        public const int BlueLevelFieldNumber = 5;
        private double blueLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double BlueLevel {
          get { return blueLevel_; }
          set {
            blueLevel_ = value;
          }
        }

        /// <summary>Field number for the "brightness" field.</summary>
        public const int BrightnessFieldNumber = 6;
        private double brightness_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double Brightness {
          get { return brightness_; }
          set {
            brightness_ = value;
          }
        }

        /// <summary>Field number for the "contrast" field.</summary>
        public const int ContrastFieldNumber = 7;
        private double contrast_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double Contrast {
          get { return contrast_; }
          set {
            contrast_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as ColorAdjustment);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(ColorAdjustment other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Gamma, other.Gamma)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BlackLevel, other.BlackLevel)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RedLevel, other.RedLevel)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GreenLevel, other.GreenLevel)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BlueLevel, other.BlueLevel)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Brightness, other.Brightness)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Contrast, other.Contrast)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Gamma != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Gamma);
          if (BlackLevel != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BlackLevel);
          if (RedLevel != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RedLevel);
          if (GreenLevel != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GreenLevel);
          if (BlueLevel != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BlueLevel);
          if (Brightness != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Brightness);
          if (Contrast != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Contrast);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Gamma != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(Gamma);
          }
          if (BlackLevel != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(BlackLevel);
          }
          if (RedLevel != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(RedLevel);
          }
          if (GreenLevel != 0D) {
            output.WriteRawTag(33);
            output.WriteDouble(GreenLevel);
          }
          if (BlueLevel != 0D) {
            output.WriteRawTag(41);
            output.WriteDouble(BlueLevel);
          }
          if (Brightness != 0D) {
            output.WriteRawTag(49);
            output.WriteDouble(Brightness);
          }
          if (Contrast != 0D) {
            output.WriteRawTag(57);
            output.WriteDouble(Contrast);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Gamma != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(Gamma);
          }
          if (BlackLevel != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(BlackLevel);
          }
          if (RedLevel != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(RedLevel);
          }
          if (GreenLevel != 0D) {
            output.WriteRawTag(33);
            output.WriteDouble(GreenLevel);
          }
          if (BlueLevel != 0D) {
            output.WriteRawTag(41);
            output.WriteDouble(BlueLevel);
          }
          if (Brightness != 0D) {
            output.WriteRawTag(49);
            output.WriteDouble(Brightness);
          }
          if (Contrast != 0D) {
            output.WriteRawTag(57);
            output.WriteDouble(Contrast);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Gamma != 0D) {
            size += 1 + 8;
          }
          if (BlackLevel != 0D) {
            size += 1 + 8;
          }
          if (RedLevel != 0D) {
            size += 1 + 8;
          }
          if (GreenLevel != 0D) {
            size += 1 + 8;
          }
          if (BlueLevel != 0D) {
            size += 1 + 8;
          }
          if (Brightness != 0D) {
            size += 1 + 8;
          }
          if (Contrast != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(ColorAdjustment other) {
          if (other == null) {
            return;
          }
          if (other.Gamma != 0D) {
            Gamma = other.Gamma;
          }
          if (other.BlackLevel != 0D) {
            BlackLevel = other.BlackLevel;
          }
          if (other.RedLevel != 0D) {
            RedLevel = other.RedLevel;
          }
          if (other.GreenLevel != 0D) {
            GreenLevel = other.GreenLevel;
          }
          if (other.BlueLevel != 0D) {
            BlueLevel = other.BlueLevel;
          }
          if (other.Brightness != 0D) {
            Brightness = other.Brightness;
          }
          if (other.Contrast != 0D) {
            Contrast = other.Contrast;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                Gamma = input.ReadDouble();
                break;
              }
              case 17: {
                BlackLevel = input.ReadDouble();
                break;
              }
              case 25: {
                RedLevel = input.ReadDouble();
                break;
              }
              case 33: {
                GreenLevel = input.ReadDouble();
                break;
              }
              case 41: {
                BlueLevel = input.ReadDouble();
                break;
              }
              case 49: {
                Brightness = input.ReadDouble();
                break;
              }
              case 57: {
                Contrast = input.ReadDouble();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                Gamma = input.ReadDouble();
                break;
              }
              case 17: {
                BlackLevel = input.ReadDouble();
                break;
              }
              case 25: {
                RedLevel = input.ReadDouble();
                break;
              }
              case 33: {
                GreenLevel = input.ReadDouble();
                break;
              }
              case 41: {
                BlueLevel = input.ReadDouble();
                break;
              }
              case 49: {
                Brightness = input.ReadDouble();
                break;
              }
              case 57: {
                Contrast = input.ReadDouble();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class BlendCompensation : pb::IMessage<BlendCompensation>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<BlendCompensation> _parser = new pb::MessageParser<BlendCompensation>(() => new BlendCompensation());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<BlendCompensation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Rv.Data.Screen.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public BlendCompensation() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public BlendCompensation(BlendCompensation other) : this() {
          blackLevel_ = other.blackLevel_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public BlendCompensation Clone() {
          return new BlendCompensation(this);
        }

        /// <summary>Field number for the "black_level" field.</summary>
        public const int BlackLevelFieldNumber = 1;
        private double blackLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double BlackLevel {
          get { return blackLevel_; }
          set {
            blackLevel_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as BlendCompensation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(BlendCompensation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BlackLevel, other.BlackLevel)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (BlackLevel != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BlackLevel);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (BlackLevel != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(BlackLevel);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (BlackLevel != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(BlackLevel);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (BlackLevel != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(BlendCompensation other) {
          if (other == null) {
            return;
          }
          if (other.BlackLevel != 0D) {
            BlackLevel = other.BlackLevel;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                BlackLevel = input.ReadDouble();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                BlackLevel = input.ReadDouble();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CornerValues : pb::IMessage<CornerValues>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CornerValues> _parser = new pb::MessageParser<CornerValues>(() => new CornerValues());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CornerValues> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rv.Data.ScreensReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CornerValues() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CornerValues(CornerValues other) : this() {
      topLeft_ = other.topLeft_ != null ? other.topLeft_.Clone() : null;
      topRight_ = other.topRight_ != null ? other.topRight_.Clone() : null;
      bottomLeft_ = other.bottomLeft_ != null ? other.bottomLeft_.Clone() : null;
      bottomRight_ = other.bottomRight_ != null ? other.bottomRight_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CornerValues Clone() {
      return new CornerValues(this);
    }

    /// <summary>Field number for the "top_left" field.</summary>
    public const int TopLeftFieldNumber = 1;
    private global::Rv.Data.Graphics.Types.Point topLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Rv.Data.Graphics.Types.Point TopLeft {
      get { return topLeft_; }
      set {
        topLeft_ = value;
      }
    }

    /// <summary>Field number for the "top_right" field.</summary>
    public const int TopRightFieldNumber = 2;
    private global::Rv.Data.Graphics.Types.Point topRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Rv.Data.Graphics.Types.Point TopRight {
      get { return topRight_; }
      set {
        topRight_ = value;
      }
    }

    /// <summary>Field number for the "bottom_left" field.</summary>
    public const int BottomLeftFieldNumber = 3;
    private global::Rv.Data.Graphics.Types.Point bottomLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Rv.Data.Graphics.Types.Point BottomLeft {
      get { return bottomLeft_; }
      set {
        bottomLeft_ = value;
      }
    }

    /// <summary>Field number for the "bottom_right" field.</summary>
    public const int BottomRightFieldNumber = 4;
    private global::Rv.Data.Graphics.Types.Point bottomRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Rv.Data.Graphics.Types.Point BottomRight {
      get { return bottomRight_; }
      set {
        bottomRight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CornerValues);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CornerValues other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TopLeft, other.TopLeft)) return false;
      if (!object.Equals(TopRight, other.TopRight)) return false;
      if (!object.Equals(BottomLeft, other.BottomLeft)) return false;
      if (!object.Equals(BottomRight, other.BottomRight)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (topLeft_ != null) hash ^= TopLeft.GetHashCode();
      if (topRight_ != null) hash ^= TopRight.GetHashCode();
      if (bottomLeft_ != null) hash ^= BottomLeft.GetHashCode();
      if (bottomRight_ != null) hash ^= BottomRight.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (topLeft_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TopLeft);
      }
      if (topRight_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TopRight);
      }
      if (bottomLeft_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BottomLeft);
      }
      if (bottomRight_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BottomRight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (topLeft_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TopLeft);
      }
      if (topRight_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TopRight);
      }
      if (bottomLeft_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BottomLeft);
      }
      if (bottomRight_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BottomRight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (topLeft_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TopLeft);
      }
      if (topRight_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TopRight);
      }
      if (bottomLeft_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BottomLeft);
      }
      if (bottomRight_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BottomRight);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CornerValues other) {
      if (other == null) {
        return;
      }
      if (other.topLeft_ != null) {
        if (topLeft_ == null) {
          TopLeft = new global::Rv.Data.Graphics.Types.Point();
        }
        TopLeft.MergeFrom(other.TopLeft);
      }
      if (other.topRight_ != null) {
        if (topRight_ == null) {
          TopRight = new global::Rv.Data.Graphics.Types.Point();
        }
        TopRight.MergeFrom(other.TopRight);
      }
      if (other.bottomLeft_ != null) {
        if (bottomLeft_ == null) {
          BottomLeft = new global::Rv.Data.Graphics.Types.Point();
        }
        BottomLeft.MergeFrom(other.BottomLeft);
      }
      if (other.bottomRight_ != null) {
        if (bottomRight_ == null) {
          BottomRight = new global::Rv.Data.Graphics.Types.Point();
        }
        BottomRight.MergeFrom(other.BottomRight);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (topLeft_ == null) {
              TopLeft = new global::Rv.Data.Graphics.Types.Point();
            }
            input.ReadMessage(TopLeft);
            break;
          }
          case 18: {
            if (topRight_ == null) {
              TopRight = new global::Rv.Data.Graphics.Types.Point();
            }
            input.ReadMessage(TopRight);
            break;
          }
          case 26: {
            if (bottomLeft_ == null) {
              BottomLeft = new global::Rv.Data.Graphics.Types.Point();
            }
            input.ReadMessage(BottomLeft);
            break;
          }
          case 34: {
            if (bottomRight_ == null) {
              BottomRight = new global::Rv.Data.Graphics.Types.Point();
            }
            input.ReadMessage(BottomRight);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (topLeft_ == null) {
              TopLeft = new global::Rv.Data.Graphics.Types.Point();
            }
            input.ReadMessage(TopLeft);
            break;
          }
          case 18: {
            if (topRight_ == null) {
              TopRight = new global::Rv.Data.Graphics.Types.Point();
            }
            input.ReadMessage(TopRight);
            break;
          }
          case 26: {
            if (bottomLeft_ == null) {
              BottomLeft = new global::Rv.Data.Graphics.Types.Point();
            }
            input.ReadMessage(BottomLeft);
            break;
          }
          case 34: {
            if (bottomRight_ == null) {
              BottomRight = new global::Rv.Data.Graphics.Types.Point();
            }
            input.ReadMessage(BottomRight);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DisplayMode : pb::IMessage<DisplayMode>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DisplayMode> _parser = new pb::MessageParser<DisplayMode>(() => new DisplayMode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DisplayMode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rv.Data.ScreensReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DisplayMode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DisplayMode(DisplayMode other) : this() {
      name_ = other.name_;
      width_ = other.width_;
      height_ = other.height_;
      refreshRate_ = other.refreshRate_;
      interlaced_ = other.interlaced_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DisplayMode Clone() {
      return new DisplayMode(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 2;
    private uint width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 3;
    private uint height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "refresh_rate" field.</summary>
    public const int RefreshRateFieldNumber = 4;
    private double refreshRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RefreshRate {
      get { return refreshRate_; }
      set {
        refreshRate_ = value;
      }
    }

    /// <summary>Field number for the "interlaced" field.</summary>
    public const int InterlacedFieldNumber = 5;
    private bool interlaced_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Interlaced {
      get { return interlaced_; }
      set {
        interlaced_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DisplayMode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DisplayMode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RefreshRate, other.RefreshRate)) return false;
      if (Interlaced != other.Interlaced) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (RefreshRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RefreshRate);
      if (Interlaced != false) hash ^= Interlaced.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Width != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Height);
      }
      if (RefreshRate != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(RefreshRate);
      }
      if (Interlaced != false) {
        output.WriteRawTag(40);
        output.WriteBool(Interlaced);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Width != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Height);
      }
      if (RefreshRate != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(RefreshRate);
      }
      if (Interlaced != false) {
        output.WriteRawTag(40);
        output.WriteBool(Interlaced);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
      }
      if (RefreshRate != 0D) {
        size += 1 + 8;
      }
      if (Interlaced != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DisplayMode other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.RefreshRate != 0D) {
        RefreshRate = other.RefreshRate;
      }
      if (other.Interlaced != false) {
        Interlaced = other.Interlaced;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Width = input.ReadUInt32();
            break;
          }
          case 24: {
            Height = input.ReadUInt32();
            break;
          }
          case 33: {
            RefreshRate = input.ReadDouble();
            break;
          }
          case 40: {
            Interlaced = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Width = input.ReadUInt32();
            break;
          }
          case 24: {
            Height = input.ReadUInt32();
            break;
          }
          case 33: {
            RefreshRate = input.ReadDouble();
            break;
          }
          case 40: {
            Interlaced = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class OutputDisplay : pb::IMessage<OutputDisplay>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OutputDisplay> _parser = new pb::MessageParser<OutputDisplay>(() => new OutputDisplay());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<OutputDisplay> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rv.Data.ScreensReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OutputDisplay() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OutputDisplay(OutputDisplay other) : this() {
      name_ = other.name_;
      model_ = other.model_;
      serial_ = other.serial_;
      deviceName_ = other.deviceName_;
      vendor_ = other.vendor_;
      modeIndex_ = other.modeIndex_;
      bounds_ = other.bounds_ != null ? other.bounds_.Clone() : null;
      type_ = other.type_;
      mode_ = other.mode_ != null ? other.mode_.Clone() : null;
      renderId_ = other.renderId_;
      switch (other.AlphaKeySettingsCase) {
        case AlphaKeySettingsOneofCase.BlackMagicAlphaKeySettings:
          BlackMagicAlphaKeySettings = other.BlackMagicAlphaKeySettings.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OutputDisplay Clone() {
      return new OutputDisplay(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model" field.</summary>
    public const int ModelFieldNumber = 2;
    private string model_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Model {
      get { return model_; }
      set {
        model_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serial" field.</summary>
    public const int SerialFieldNumber = 3;
    private string serial_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Serial {
      get { return serial_; }
      set {
        serial_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deviceName" field.</summary>
    public const int DeviceNameFieldNumber = 4;
    private string deviceName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DeviceName {
      get { return deviceName_; }
      set {
        deviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vendor" field.</summary>
    public const int VendorFieldNumber = 5;
    private string vendor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Vendor {
      get { return vendor_; }
      set {
        vendor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "modeIndex" field.</summary>
    public const int ModeIndexFieldNumber = 6;
    private uint modeIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ModeIndex {
      get { return modeIndex_; }
      set {
        modeIndex_ = value;
      }
    }

    /// <summary>Field number for the "bounds" field.</summary>
    public const int BoundsFieldNumber = 7;
    private global::Rv.Data.Graphics.Types.Rect bounds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Rv.Data.Graphics.Types.Rect Bounds {
      get { return bounds_; }
      set {
        bounds_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 8;
    private global::Rv.Data.OutputDisplay.Types.Type type_ = global::Rv.Data.OutputDisplay.Types.Type.Unknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Rv.Data.OutputDisplay.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 9;
    private global::Rv.Data.DisplayMode mode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Rv.Data.DisplayMode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "render_id" field.</summary>
    public const int RenderIdFieldNumber = 10;
    private string renderId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RenderId {
      get { return renderId_; }
      set {
        renderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "black_magic_alpha_key_settings" field.</summary>
    public const int BlackMagicAlphaKeySettingsFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Rv.Data.OutputDisplay.Types.BlackmagicAlphaKeySettings BlackMagicAlphaKeySettings {
      get { return alphaKeySettingsCase_ == AlphaKeySettingsOneofCase.BlackMagicAlphaKeySettings ? (global::Rv.Data.OutputDisplay.Types.BlackmagicAlphaKeySettings) alphaKeySettings_ : null; }
      set {
        alphaKeySettings_ = value;
        alphaKeySettingsCase_ = value == null ? AlphaKeySettingsOneofCase.None : AlphaKeySettingsOneofCase.BlackMagicAlphaKeySettings;
      }
    }

    private object alphaKeySettings_;
    /// <summary>Enum of possible cases for the "AlphaKeySettings" oneof.</summary>
    public enum AlphaKeySettingsOneofCase {
      None = 0,
      BlackMagicAlphaKeySettings = 11,
    }
    private AlphaKeySettingsOneofCase alphaKeySettingsCase_ = AlphaKeySettingsOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AlphaKeySettingsOneofCase AlphaKeySettingsCase {
      get { return alphaKeySettingsCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAlphaKeySettings() {
      alphaKeySettingsCase_ = AlphaKeySettingsOneofCase.None;
      alphaKeySettings_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as OutputDisplay);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(OutputDisplay other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Model != other.Model) return false;
      if (Serial != other.Serial) return false;
      if (DeviceName != other.DeviceName) return false;
      if (Vendor != other.Vendor) return false;
      if (ModeIndex != other.ModeIndex) return false;
      if (!object.Equals(Bounds, other.Bounds)) return false;
      if (Type != other.Type) return false;
      if (!object.Equals(Mode, other.Mode)) return false;
      if (RenderId != other.RenderId) return false;
      if (!object.Equals(BlackMagicAlphaKeySettings, other.BlackMagicAlphaKeySettings)) return false;
      if (AlphaKeySettingsCase != other.AlphaKeySettingsCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Model.Length != 0) hash ^= Model.GetHashCode();
      if (Serial.Length != 0) hash ^= Serial.GetHashCode();
      if (DeviceName.Length != 0) hash ^= DeviceName.GetHashCode();
      if (Vendor.Length != 0) hash ^= Vendor.GetHashCode();
      if (ModeIndex != 0) hash ^= ModeIndex.GetHashCode();
      if (bounds_ != null) hash ^= Bounds.GetHashCode();
      if (Type != global::Rv.Data.OutputDisplay.Types.Type.Unknown) hash ^= Type.GetHashCode();
      if (mode_ != null) hash ^= Mode.GetHashCode();
      if (RenderId.Length != 0) hash ^= RenderId.GetHashCode();
      if (alphaKeySettingsCase_ == AlphaKeySettingsOneofCase.BlackMagicAlphaKeySettings) hash ^= BlackMagicAlphaKeySettings.GetHashCode();
      hash ^= (int) alphaKeySettingsCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Model.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Model);
      }
      if (Serial.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Serial);
      }
      if (DeviceName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DeviceName);
      }
      if (Vendor.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Vendor);
      }
      if (ModeIndex != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ModeIndex);
      }
      if (bounds_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Bounds);
      }
      if (Type != global::Rv.Data.OutputDisplay.Types.Type.Unknown) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Type);
      }
      if (mode_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Mode);
      }
      if (RenderId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(RenderId);
      }
      if (alphaKeySettingsCase_ == AlphaKeySettingsOneofCase.BlackMagicAlphaKeySettings) {
        output.WriteRawTag(90);
        output.WriteMessage(BlackMagicAlphaKeySettings);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Model.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Model);
      }
      if (Serial.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Serial);
      }
      if (DeviceName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DeviceName);
      }
      if (Vendor.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Vendor);
      }
      if (ModeIndex != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ModeIndex);
      }
      if (bounds_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Bounds);
      }
      if (Type != global::Rv.Data.OutputDisplay.Types.Type.Unknown) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Type);
      }
      if (mode_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Mode);
      }
      if (RenderId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(RenderId);
      }
      if (alphaKeySettingsCase_ == AlphaKeySettingsOneofCase.BlackMagicAlphaKeySettings) {
        output.WriteRawTag(90);
        output.WriteMessage(BlackMagicAlphaKeySettings);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Model.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Model);
      }
      if (Serial.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Serial);
      }
      if (DeviceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceName);
      }
      if (Vendor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Vendor);
      }
      if (ModeIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ModeIndex);
      }
      if (bounds_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bounds);
      }
      if (Type != global::Rv.Data.OutputDisplay.Types.Type.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (mode_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mode);
      }
      if (RenderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RenderId);
      }
      if (alphaKeySettingsCase_ == AlphaKeySettingsOneofCase.BlackMagicAlphaKeySettings) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlackMagicAlphaKeySettings);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(OutputDisplay other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Model.Length != 0) {
        Model = other.Model;
      }
      if (other.Serial.Length != 0) {
        Serial = other.Serial;
      }
      if (other.DeviceName.Length != 0) {
        DeviceName = other.DeviceName;
      }
      if (other.Vendor.Length != 0) {
        Vendor = other.Vendor;
      }
      if (other.ModeIndex != 0) {
        ModeIndex = other.ModeIndex;
      }
      if (other.bounds_ != null) {
        if (bounds_ == null) {
          Bounds = new global::Rv.Data.Graphics.Types.Rect();
        }
        Bounds.MergeFrom(other.Bounds);
      }
      if (other.Type != global::Rv.Data.OutputDisplay.Types.Type.Unknown) {
        Type = other.Type;
      }
      if (other.mode_ != null) {
        if (mode_ == null) {
          Mode = new global::Rv.Data.DisplayMode();
        }
        Mode.MergeFrom(other.Mode);
      }
      if (other.RenderId.Length != 0) {
        RenderId = other.RenderId;
      }
      switch (other.AlphaKeySettingsCase) {
        case AlphaKeySettingsOneofCase.BlackMagicAlphaKeySettings:
          if (BlackMagicAlphaKeySettings == null) {
            BlackMagicAlphaKeySettings = new global::Rv.Data.OutputDisplay.Types.BlackmagicAlphaKeySettings();
          }
          BlackMagicAlphaKeySettings.MergeFrom(other.BlackMagicAlphaKeySettings);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Model = input.ReadString();
            break;
          }
          case 26: {
            Serial = input.ReadString();
            break;
          }
          case 34: {
            DeviceName = input.ReadString();
            break;
          }
          case 42: {
            Vendor = input.ReadString();
            break;
          }
          case 48: {
            ModeIndex = input.ReadUInt32();
            break;
          }
          case 58: {
            if (bounds_ == null) {
              Bounds = new global::Rv.Data.Graphics.Types.Rect();
            }
            input.ReadMessage(Bounds);
            break;
          }
          case 64: {
            Type = (global::Rv.Data.OutputDisplay.Types.Type) input.ReadEnum();
            break;
          }
          case 74: {
            if (mode_ == null) {
              Mode = new global::Rv.Data.DisplayMode();
            }
            input.ReadMessage(Mode);
            break;
          }
          case 82: {
            RenderId = input.ReadString();
            break;
          }
          case 90: {
            global::Rv.Data.OutputDisplay.Types.BlackmagicAlphaKeySettings subBuilder = new global::Rv.Data.OutputDisplay.Types.BlackmagicAlphaKeySettings();
            if (alphaKeySettingsCase_ == AlphaKeySettingsOneofCase.BlackMagicAlphaKeySettings) {
              subBuilder.MergeFrom(BlackMagicAlphaKeySettings);
            }
            input.ReadMessage(subBuilder);
            BlackMagicAlphaKeySettings = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Model = input.ReadString();
            break;
          }
          case 26: {
            Serial = input.ReadString();
            break;
          }
          case 34: {
            DeviceName = input.ReadString();
            break;
          }
          case 42: {
            Vendor = input.ReadString();
            break;
          }
          case 48: {
            ModeIndex = input.ReadUInt32();
            break;
          }
          case 58: {
            if (bounds_ == null) {
              Bounds = new global::Rv.Data.Graphics.Types.Rect();
            }
            input.ReadMessage(Bounds);
            break;
          }
          case 64: {
            Type = (global::Rv.Data.OutputDisplay.Types.Type) input.ReadEnum();
            break;
          }
          case 74: {
            if (mode_ == null) {
              Mode = new global::Rv.Data.DisplayMode();
            }
            input.ReadMessage(Mode);
            break;
          }
          case 82: {
            RenderId = input.ReadString();
            break;
          }
          case 90: {
            global::Rv.Data.OutputDisplay.Types.BlackmagicAlphaKeySettings subBuilder = new global::Rv.Data.OutputDisplay.Types.BlackmagicAlphaKeySettings();
            if (alphaKeySettingsCase_ == AlphaKeySettingsOneofCase.BlackMagicAlphaKeySettings) {
              subBuilder.MergeFrom(BlackMagicAlphaKeySettings);
            }
            input.ReadMessage(subBuilder);
            BlackMagicAlphaKeySettings = subBuilder;
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the OutputDisplay message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("TYPE_UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("TYPE_SCREEN")] Screen = 1,
        [pbr::OriginalName("TYPE_CARD")] Card = 2,
        [pbr::OriginalName("TYPE_NDI")] Ndi = 3,
        [pbr::OriginalName("TYPE_SYPHON")] Syphon = 4,
        [pbr::OriginalName("TYPE_CUSTOM")] Custom = 5,
      }

      public sealed partial class BlackmagicAlphaKeySettings : pb::IMessage<BlackmagicAlphaKeySettings>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<BlackmagicAlphaKeySettings> _parser = new pb::MessageParser<BlackmagicAlphaKeySettings>(() => new BlackmagicAlphaKeySettings());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<BlackmagicAlphaKeySettings> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Rv.Data.OutputDisplay.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public BlackmagicAlphaKeySettings() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public BlackmagicAlphaKeySettings(BlackmagicAlphaKeySettings other) : this() {
          enabled_ = other.enabled_;
          keyMode_ = other.keyMode_;
          blendValue_ = other.blendValue_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public BlackmagicAlphaKeySettings Clone() {
          return new BlackmagicAlphaKeySettings(this);
        }

        /// <summary>Field number for the "enabled" field.</summary>
        public const int EnabledFieldNumber = 1;
        private bool enabled_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Enabled {
          get { return enabled_; }
          set {
            enabled_ = value;
          }
        }

        /// <summary>Field number for the "key_mode" field.</summary>
        public const int KeyModeFieldNumber = 2;
        private global::Rv.Data.OutputDisplay.Types.BlackmagicAlphaKeySettings.Types.KeyMode keyMode_ = global::Rv.Data.OutputDisplay.Types.BlackmagicAlphaKeySettings.Types.KeyMode.Internal;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Rv.Data.OutputDisplay.Types.BlackmagicAlphaKeySettings.Types.KeyMode KeyMode {
          get { return keyMode_; }
          set {
            keyMode_ = value;
          }
        }

        /// <summary>Field number for the "blend_value" field.</summary>
        public const int BlendValueFieldNumber = 3;
        private double blendValue_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double BlendValue {
          get { return blendValue_; }
          set {
            blendValue_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as BlackmagicAlphaKeySettings);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(BlackmagicAlphaKeySettings other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Enabled != other.Enabled) return false;
          if (KeyMode != other.KeyMode) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BlendValue, other.BlendValue)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Enabled != false) hash ^= Enabled.GetHashCode();
          if (KeyMode != global::Rv.Data.OutputDisplay.Types.BlackmagicAlphaKeySettings.Types.KeyMode.Internal) hash ^= KeyMode.GetHashCode();
          if (BlendValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BlendValue);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Enabled != false) {
            output.WriteRawTag(8);
            output.WriteBool(Enabled);
          }
          if (KeyMode != global::Rv.Data.OutputDisplay.Types.BlackmagicAlphaKeySettings.Types.KeyMode.Internal) {
            output.WriteRawTag(16);
            output.WriteEnum((int) KeyMode);
          }
          if (BlendValue != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(BlendValue);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Enabled != false) {
            output.WriteRawTag(8);
            output.WriteBool(Enabled);
          }
          if (KeyMode != global::Rv.Data.OutputDisplay.Types.BlackmagicAlphaKeySettings.Types.KeyMode.Internal) {
            output.WriteRawTag(16);
            output.WriteEnum((int) KeyMode);
          }
          if (BlendValue != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(BlendValue);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Enabled != false) {
            size += 1 + 1;
          }
          if (KeyMode != global::Rv.Data.OutputDisplay.Types.BlackmagicAlphaKeySettings.Types.KeyMode.Internal) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) KeyMode);
          }
          if (BlendValue != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(BlackmagicAlphaKeySettings other) {
          if (other == null) {
            return;
          }
          if (other.Enabled != false) {
            Enabled = other.Enabled;
          }
          if (other.KeyMode != global::Rv.Data.OutputDisplay.Types.BlackmagicAlphaKeySettings.Types.KeyMode.Internal) {
            KeyMode = other.KeyMode;
          }
          if (other.BlendValue != 0D) {
            BlendValue = other.BlendValue;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Enabled = input.ReadBool();
                break;
              }
              case 16: {
                KeyMode = (global::Rv.Data.OutputDisplay.Types.BlackmagicAlphaKeySettings.Types.KeyMode) input.ReadEnum();
                break;
              }
              case 25: {
                BlendValue = input.ReadDouble();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Enabled = input.ReadBool();
                break;
              }
              case 16: {
                KeyMode = (global::Rv.Data.OutputDisplay.Types.BlackmagicAlphaKeySettings.Types.KeyMode) input.ReadEnum();
                break;
              }
              case 25: {
                BlendValue = input.ReadDouble();
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the BlackmagicAlphaKeySettings message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static partial class Types {
          public enum KeyMode {
            [pbr::OriginalName("KEY_MODE_INTERNAL")] Internal = 0,
            [pbr::OriginalName("KEY_MODE_EXTERNAL")] External = 1,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class EdgeBlend : pb::IMessage<EdgeBlend>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EdgeBlend> _parser = new pb::MessageParser<EdgeBlend>(() => new EdgeBlend());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<EdgeBlend> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rv.Data.ScreensReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EdgeBlend() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EdgeBlend(EdgeBlend other) : this() {
      uuid_ = other.uuid_ != null ? other.uuid_.Clone() : null;
      radius_ = other.radius_;
      intensity_ = other.intensity_;
      mode_ = other.mode_;
      firstScreen_ = other.firstScreen_ != null ? other.firstScreen_.Clone() : null;
      secondScreen_ = other.secondScreen_ != null ? other.secondScreen_.Clone() : null;
      leftScreen_ = other.leftScreen_ != null ? other.leftScreen_.Clone() : null;
      rightScreen_ = other.rightScreen_ != null ? other.rightScreen_.Clone() : null;
      topScreen_ = other.topScreen_ != null ? other.topScreen_.Clone() : null;
      bottomScreen_ = other.bottomScreen_ != null ? other.bottomScreen_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EdgeBlend Clone() {
      return new EdgeBlend(this);
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private global::Rv.Data.UUID uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Rv.Data.UUID Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 2;
    private double radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    /// <summary>Field number for the "intensity" field.</summary>
    public const int IntensityFieldNumber = 3;
    private double intensity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Intensity {
      get { return intensity_; }
      set {
        intensity_ = value;
      }
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 4;
    private global::Rv.Data.EdgeBlend.Types.Mode mode_ = global::Rv.Data.EdgeBlend.Types.Mode.Linear;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Rv.Data.EdgeBlend.Types.Mode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "first_screen" field.</summary>
    public const int FirstScreenFieldNumber = 5;
    private global::Rv.Data.EdgeBlend.Types.Screen firstScreen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Rv.Data.EdgeBlend.Types.Screen FirstScreen {
      get { return firstScreen_; }
      set {
        firstScreen_ = value;
      }
    }

    /// <summary>Field number for the "second_screen" field.</summary>
    public const int SecondScreenFieldNumber = 6;
    private global::Rv.Data.EdgeBlend.Types.Screen secondScreen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Rv.Data.EdgeBlend.Types.Screen SecondScreen {
      get { return secondScreen_; }
      set {
        secondScreen_ = value;
      }
    }

    /// <summary>Field number for the "left_screen" field.</summary>
    public const int LeftScreenFieldNumber = 7;
    private global::Rv.Data.EdgeBlend.Types.Screen leftScreen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Rv.Data.EdgeBlend.Types.Screen LeftScreen {
      get { return leftScreen_; }
      set {
        leftScreen_ = value;
      }
    }

    /// <summary>Field number for the "right_screen" field.</summary>
    public const int RightScreenFieldNumber = 8;
    private global::Rv.Data.EdgeBlend.Types.Screen rightScreen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Rv.Data.EdgeBlend.Types.Screen RightScreen {
      get { return rightScreen_; }
      set {
        rightScreen_ = value;
      }
    }

    /// <summary>Field number for the "top_screen" field.</summary>
    public const int TopScreenFieldNumber = 9;
    private global::Rv.Data.EdgeBlend.Types.Screen topScreen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Rv.Data.EdgeBlend.Types.Screen TopScreen {
      get { return topScreen_; }
      set {
        topScreen_ = value;
      }
    }

    /// <summary>Field number for the "bottom_screen" field.</summary>
    public const int BottomScreenFieldNumber = 10;
    private global::Rv.Data.EdgeBlend.Types.Screen bottomScreen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Rv.Data.EdgeBlend.Types.Screen BottomScreen {
      get { return bottomScreen_; }
      set {
        bottomScreen_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as EdgeBlend);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(EdgeBlend other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Uuid, other.Uuid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Radius, other.Radius)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Intensity, other.Intensity)) return false;
      if (Mode != other.Mode) return false;
      if (!object.Equals(FirstScreen, other.FirstScreen)) return false;
      if (!object.Equals(SecondScreen, other.SecondScreen)) return false;
      if (!object.Equals(LeftScreen, other.LeftScreen)) return false;
      if (!object.Equals(RightScreen, other.RightScreen)) return false;
      if (!object.Equals(TopScreen, other.TopScreen)) return false;
      if (!object.Equals(BottomScreen, other.BottomScreen)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (uuid_ != null) hash ^= Uuid.GetHashCode();
      if (Radius != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Radius);
      if (Intensity != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Intensity);
      if (Mode != global::Rv.Data.EdgeBlend.Types.Mode.Linear) hash ^= Mode.GetHashCode();
      if (firstScreen_ != null) hash ^= FirstScreen.GetHashCode();
      if (secondScreen_ != null) hash ^= SecondScreen.GetHashCode();
      if (leftScreen_ != null) hash ^= LeftScreen.GetHashCode();
      if (rightScreen_ != null) hash ^= RightScreen.GetHashCode();
      if (topScreen_ != null) hash ^= TopScreen.GetHashCode();
      if (bottomScreen_ != null) hash ^= BottomScreen.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (uuid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Uuid);
      }
      if (Radius != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Radius);
      }
      if (Intensity != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Intensity);
      }
      if (Mode != global::Rv.Data.EdgeBlend.Types.Mode.Linear) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Mode);
      }
      if (firstScreen_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(FirstScreen);
      }
      if (secondScreen_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(SecondScreen);
      }
      if (leftScreen_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(LeftScreen);
      }
      if (rightScreen_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(RightScreen);
      }
      if (topScreen_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(TopScreen);
      }
      if (bottomScreen_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(BottomScreen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (uuid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Uuid);
      }
      if (Radius != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Radius);
      }
      if (Intensity != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Intensity);
      }
      if (Mode != global::Rv.Data.EdgeBlend.Types.Mode.Linear) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Mode);
      }
      if (firstScreen_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(FirstScreen);
      }
      if (secondScreen_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(SecondScreen);
      }
      if (leftScreen_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(LeftScreen);
      }
      if (rightScreen_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(RightScreen);
      }
      if (topScreen_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(TopScreen);
      }
      if (bottomScreen_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(BottomScreen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (uuid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Uuid);
      }
      if (Radius != 0D) {
        size += 1 + 8;
      }
      if (Intensity != 0D) {
        size += 1 + 8;
      }
      if (Mode != global::Rv.Data.EdgeBlend.Types.Mode.Linear) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      if (firstScreen_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FirstScreen);
      }
      if (secondScreen_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SecondScreen);
      }
      if (leftScreen_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeftScreen);
      }
      if (rightScreen_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RightScreen);
      }
      if (topScreen_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TopScreen);
      }
      if (bottomScreen_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BottomScreen);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(EdgeBlend other) {
      if (other == null) {
        return;
      }
      if (other.uuid_ != null) {
        if (uuid_ == null) {
          Uuid = new global::Rv.Data.UUID();
        }
        Uuid.MergeFrom(other.Uuid);
      }
      if (other.Radius != 0D) {
        Radius = other.Radius;
      }
      if (other.Intensity != 0D) {
        Intensity = other.Intensity;
      }
      if (other.Mode != global::Rv.Data.EdgeBlend.Types.Mode.Linear) {
        Mode = other.Mode;
      }
      if (other.firstScreen_ != null) {
        if (firstScreen_ == null) {
          FirstScreen = new global::Rv.Data.EdgeBlend.Types.Screen();
        }
        FirstScreen.MergeFrom(other.FirstScreen);
      }
      if (other.secondScreen_ != null) {
        if (secondScreen_ == null) {
          SecondScreen = new global::Rv.Data.EdgeBlend.Types.Screen();
        }
        SecondScreen.MergeFrom(other.SecondScreen);
      }
      if (other.leftScreen_ != null) {
        if (leftScreen_ == null) {
          LeftScreen = new global::Rv.Data.EdgeBlend.Types.Screen();
        }
        LeftScreen.MergeFrom(other.LeftScreen);
      }
      if (other.rightScreen_ != null) {
        if (rightScreen_ == null) {
          RightScreen = new global::Rv.Data.EdgeBlend.Types.Screen();
        }
        RightScreen.MergeFrom(other.RightScreen);
      }
      if (other.topScreen_ != null) {
        if (topScreen_ == null) {
          TopScreen = new global::Rv.Data.EdgeBlend.Types.Screen();
        }
        TopScreen.MergeFrom(other.TopScreen);
      }
      if (other.bottomScreen_ != null) {
        if (bottomScreen_ == null) {
          BottomScreen = new global::Rv.Data.EdgeBlend.Types.Screen();
        }
        BottomScreen.MergeFrom(other.BottomScreen);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (uuid_ == null) {
              Uuid = new global::Rv.Data.UUID();
            }
            input.ReadMessage(Uuid);
            break;
          }
          case 17: {
            Radius = input.ReadDouble();
            break;
          }
          case 25: {
            Intensity = input.ReadDouble();
            break;
          }
          case 32: {
            Mode = (global::Rv.Data.EdgeBlend.Types.Mode) input.ReadEnum();
            break;
          }
          case 42: {
            if (firstScreen_ == null) {
              FirstScreen = new global::Rv.Data.EdgeBlend.Types.Screen();
            }
            input.ReadMessage(FirstScreen);
            break;
          }
          case 50: {
            if (secondScreen_ == null) {
              SecondScreen = new global::Rv.Data.EdgeBlend.Types.Screen();
            }
            input.ReadMessage(SecondScreen);
            break;
          }
          case 58: {
            if (leftScreen_ == null) {
              LeftScreen = new global::Rv.Data.EdgeBlend.Types.Screen();
            }
            input.ReadMessage(LeftScreen);
            break;
          }
          case 66: {
            if (rightScreen_ == null) {
              RightScreen = new global::Rv.Data.EdgeBlend.Types.Screen();
            }
            input.ReadMessage(RightScreen);
            break;
          }
          case 74: {
            if (topScreen_ == null) {
              TopScreen = new global::Rv.Data.EdgeBlend.Types.Screen();
            }
            input.ReadMessage(TopScreen);
            break;
          }
          case 82: {
            if (bottomScreen_ == null) {
              BottomScreen = new global::Rv.Data.EdgeBlend.Types.Screen();
            }
            input.ReadMessage(BottomScreen);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (uuid_ == null) {
              Uuid = new global::Rv.Data.UUID();
            }
            input.ReadMessage(Uuid);
            break;
          }
          case 17: {
            Radius = input.ReadDouble();
            break;
          }
          case 25: {
            Intensity = input.ReadDouble();
            break;
          }
          case 32: {
            Mode = (global::Rv.Data.EdgeBlend.Types.Mode) input.ReadEnum();
            break;
          }
          case 42: {
            if (firstScreen_ == null) {
              FirstScreen = new global::Rv.Data.EdgeBlend.Types.Screen();
            }
            input.ReadMessage(FirstScreen);
            break;
          }
          case 50: {
            if (secondScreen_ == null) {
              SecondScreen = new global::Rv.Data.EdgeBlend.Types.Screen();
            }
            input.ReadMessage(SecondScreen);
            break;
          }
          case 58: {
            if (leftScreen_ == null) {
              LeftScreen = new global::Rv.Data.EdgeBlend.Types.Screen();
            }
            input.ReadMessage(LeftScreen);
            break;
          }
          case 66: {
            if (rightScreen_ == null) {
              RightScreen = new global::Rv.Data.EdgeBlend.Types.Screen();
            }
            input.ReadMessage(RightScreen);
            break;
          }
          case 74: {
            if (topScreen_ == null) {
              TopScreen = new global::Rv.Data.EdgeBlend.Types.Screen();
            }
            input.ReadMessage(TopScreen);
            break;
          }
          case 82: {
            if (bottomScreen_ == null) {
              BottomScreen = new global::Rv.Data.EdgeBlend.Types.Screen();
            }
            input.ReadMessage(BottomScreen);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the EdgeBlend message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum Mode {
        [pbr::OriginalName("MODE_LINEAR")] Linear = 0,
        [pbr::OriginalName("MODE_CUBIC")] Cubic = 1,
        [pbr::OriginalName("MODE_QUADRATIC")] Quadratic = 2,
      }

      public sealed partial class Screen : pb::IMessage<Screen>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Screen> _parser = new pb::MessageParser<Screen>(() => new Screen());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Screen> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Rv.Data.EdgeBlend.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Screen() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Screen(Screen other) : this() {
          uuid_ = other.uuid_ != null ? other.uuid_.Clone() : null;
          edge_ = other.edge_;
          gamma_ = other.gamma_;
          blackLevel_ = other.blackLevel_;
          mode_ = other.mode_;
          radius_ = other.radius_;
          intensity_ = other.intensity_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Screen Clone() {
          return new Screen(this);
        }

        /// <summary>Field number for the "uuid" field.</summary>
        public const int UuidFieldNumber = 1;
        private global::Rv.Data.UUID uuid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Rv.Data.UUID Uuid {
          get { return uuid_; }
          set {
            uuid_ = value;
          }
        }

        /// <summary>Field number for the "edge" field.</summary>
        public const int EdgeFieldNumber = 2;
        private global::Rv.Data.EdgeBlend.Types.Screen.Types.Edge edge_ = global::Rv.Data.EdgeBlend.Types.Screen.Types.Edge.Unknown;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Rv.Data.EdgeBlend.Types.Screen.Types.Edge Edge {
          get { return edge_; }
          set {
            edge_ = value;
          }
        }

        /// <summary>Field number for the "gamma" field.</summary>
        public const int GammaFieldNumber = 3;
        private double gamma_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double Gamma {
          get { return gamma_; }
          set {
            gamma_ = value;
          }
        }

        /// <summary>Field number for the "black_level" field.</summary>
        public const int BlackLevelFieldNumber = 4;
        private double blackLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double BlackLevel {
          get { return blackLevel_; }
          set {
            blackLevel_ = value;
          }
        }

        /// <summary>Field number for the "mode" field.</summary>
        public const int ModeFieldNumber = 5;
        private global::Rv.Data.EdgeBlend.Types.Screen.Types.Mode mode_ = global::Rv.Data.EdgeBlend.Types.Screen.Types.Mode.Linear;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Rv.Data.EdgeBlend.Types.Screen.Types.Mode Mode {
          get { return mode_; }
          set {
            mode_ = value;
          }
        }

        /// <summary>Field number for the "radius" field.</summary>
        public const int RadiusFieldNumber = 6;
        private double radius_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double Radius {
          get { return radius_; }
          set {
            radius_ = value;
          }
        }

        /// <summary>Field number for the "intensity" field.</summary>
        public const int IntensityFieldNumber = 7;
        private double intensity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double Intensity {
          get { return intensity_; }
          set {
            intensity_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Screen);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Screen other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Uuid, other.Uuid)) return false;
          if (Edge != other.Edge) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Gamma, other.Gamma)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BlackLevel, other.BlackLevel)) return false;
          if (Mode != other.Mode) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Radius, other.Radius)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Intensity, other.Intensity)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (uuid_ != null) hash ^= Uuid.GetHashCode();
          if (Edge != global::Rv.Data.EdgeBlend.Types.Screen.Types.Edge.Unknown) hash ^= Edge.GetHashCode();
          if (Gamma != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Gamma);
          if (BlackLevel != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BlackLevel);
          if (Mode != global::Rv.Data.EdgeBlend.Types.Screen.Types.Mode.Linear) hash ^= Mode.GetHashCode();
          if (Radius != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Radius);
          if (Intensity != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Intensity);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (uuid_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Uuid);
          }
          if (Edge != global::Rv.Data.EdgeBlend.Types.Screen.Types.Edge.Unknown) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Edge);
          }
          if (Gamma != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(Gamma);
          }
          if (BlackLevel != 0D) {
            output.WriteRawTag(33);
            output.WriteDouble(BlackLevel);
          }
          if (Mode != global::Rv.Data.EdgeBlend.Types.Screen.Types.Mode.Linear) {
            output.WriteRawTag(40);
            output.WriteEnum((int) Mode);
          }
          if (Radius != 0D) {
            output.WriteRawTag(49);
            output.WriteDouble(Radius);
          }
          if (Intensity != 0D) {
            output.WriteRawTag(57);
            output.WriteDouble(Intensity);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (uuid_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Uuid);
          }
          if (Edge != global::Rv.Data.EdgeBlend.Types.Screen.Types.Edge.Unknown) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Edge);
          }
          if (Gamma != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(Gamma);
          }
          if (BlackLevel != 0D) {
            output.WriteRawTag(33);
            output.WriteDouble(BlackLevel);
          }
          if (Mode != global::Rv.Data.EdgeBlend.Types.Screen.Types.Mode.Linear) {
            output.WriteRawTag(40);
            output.WriteEnum((int) Mode);
          }
          if (Radius != 0D) {
            output.WriteRawTag(49);
            output.WriteDouble(Radius);
          }
          if (Intensity != 0D) {
            output.WriteRawTag(57);
            output.WriteDouble(Intensity);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (uuid_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Uuid);
          }
          if (Edge != global::Rv.Data.EdgeBlend.Types.Screen.Types.Edge.Unknown) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Edge);
          }
          if (Gamma != 0D) {
            size += 1 + 8;
          }
          if (BlackLevel != 0D) {
            size += 1 + 8;
          }
          if (Mode != global::Rv.Data.EdgeBlend.Types.Screen.Types.Mode.Linear) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
          }
          if (Radius != 0D) {
            size += 1 + 8;
          }
          if (Intensity != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Screen other) {
          if (other == null) {
            return;
          }
          if (other.uuid_ != null) {
            if (uuid_ == null) {
              Uuid = new global::Rv.Data.UUID();
            }
            Uuid.MergeFrom(other.Uuid);
          }
          if (other.Edge != global::Rv.Data.EdgeBlend.Types.Screen.Types.Edge.Unknown) {
            Edge = other.Edge;
          }
          if (other.Gamma != 0D) {
            Gamma = other.Gamma;
          }
          if (other.BlackLevel != 0D) {
            BlackLevel = other.BlackLevel;
          }
          if (other.Mode != global::Rv.Data.EdgeBlend.Types.Screen.Types.Mode.Linear) {
            Mode = other.Mode;
          }
          if (other.Radius != 0D) {
            Radius = other.Radius;
          }
          if (other.Intensity != 0D) {
            Intensity = other.Intensity;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (uuid_ == null) {
                  Uuid = new global::Rv.Data.UUID();
                }
                input.ReadMessage(Uuid);
                break;
              }
              case 16: {
                Edge = (global::Rv.Data.EdgeBlend.Types.Screen.Types.Edge) input.ReadEnum();
                break;
              }
              case 25: {
                Gamma = input.ReadDouble();
                break;
              }
              case 33: {
                BlackLevel = input.ReadDouble();
                break;
              }
              case 40: {
                Mode = (global::Rv.Data.EdgeBlend.Types.Screen.Types.Mode) input.ReadEnum();
                break;
              }
              case 49: {
                Radius = input.ReadDouble();
                break;
              }
              case 57: {
                Intensity = input.ReadDouble();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (uuid_ == null) {
                  Uuid = new global::Rv.Data.UUID();
                }
                input.ReadMessage(Uuid);
                break;
              }
              case 16: {
                Edge = (global::Rv.Data.EdgeBlend.Types.Screen.Types.Edge) input.ReadEnum();
                break;
              }
              case 25: {
                Gamma = input.ReadDouble();
                break;
              }
              case 33: {
                BlackLevel = input.ReadDouble();
                break;
              }
              case 40: {
                Mode = (global::Rv.Data.EdgeBlend.Types.Screen.Types.Mode) input.ReadEnum();
                break;
              }
              case 49: {
                Radius = input.ReadDouble();
                break;
              }
              case 57: {
                Intensity = input.ReadDouble();
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the Screen message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static partial class Types {
          public enum Edge {
            [pbr::OriginalName("EDGE_UNKNOWN")] Unknown = 0,
            [pbr::OriginalName("EDGE_LEFT")] Left = 1,
            [pbr::OriginalName("EDGE_RIGHT")] Right = 2,
            [pbr::OriginalName("EDGE_TOP")] Top = 3,
            [pbr::OriginalName("EDGE_BOTTOM")] Bottom = 4,
          }

          public enum Mode {
            [pbr::OriginalName("MODE_LINEAR")] Linear = 0,
            [pbr::OriginalName("MODE_CUBIC")] Cubic = 1,
            [pbr::OriginalName("MODE_QUADRATIC")] Quadratic = 2,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
